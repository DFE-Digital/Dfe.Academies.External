name: Cypress Tests using Cypress Docker Image

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      URL:
        required: true
      LOGIN_USERNAME:
        required: true
      LOGIN_PASSWORD:
        required: true
      SIGNIN_URL:
        required: true
      TEAMS_WEBHOOK_URL:
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        type: environment

concurrency:
  group: ${{ github.workflow }}

jobs:
  cypress-tests:
    name: Run Cypress Tests
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix:
        browser: [
          "edge"
        ]
    container:
      image: cypress/browsers:22.21.0@sha256:1b0e8df630f819b84ae8f46e39746ac79e3e1666208a1d0716b2e07ccafd19a9
    defaults:
      run:
        working-directory: Dfe.Academies.External.Web/CypressTests
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.ref }}

      - name: Run
        uses: cypress-io/github-action@b8ba51a856ba5f4c15cf39007636d4ab04f23e3c
        env:
          CYPRESS_URL: ${{ secrets.URL }}
          CYPRESS_LOGIN_USERNAME: ${{ secrets.LOGIN_USERNAME }}
          CYPRESS_LOGIN_PASSWORD: ${{ secrets.LOGIN_PASSWORD }}
          CYPRESS_SIGNIN_URL: ${{ secrets.SIGNIN_URL }}
        with:
          browser: ${{ matrix.browser }}
          working-directory: ./Dfe.Academies.External.Web/CypressTests
          wait-on: ${{ secrets.URL }}

      - name: Generate report
        if: always()
        run: |
          mkdir mochareports
          npm run generate:html:report

      - name: Upload report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: failure()
        with:
          name: screenshots-${{ inputs.environment }}-${{ matrix.browser }}
          path: Dfe.Academies.External.Web/CypressTests/cypress/screenshots

      - name: Report results to Teams
        if: always()
        run: |
          # Create a Node script to send test results to Teams
          node <<EOF
          const axios = require('axios');
          const fs = require('fs');
          const path = require('path');
          
          async function sendTeamsNotification() {
            try {
              // Read the combined report JSON to get test statistics
              let reportStats = { tests: 0, passes: 0, failures: 0 };
              const reportPath = path.join(process.cwd(), 'mochareports', 'report.json');
          
              if (fs.existsSync(reportPath)) {
                const reportData = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                if (reportData && reportData.stats) {
                  reportStats = {
                    tests: reportData.stats.tests || 0,
                    passes: reportData.stats.passes || 0,
                    failures: reportData.stats.failures || 0
                  };
                }
              } else {
                console.warn('Report file not found at:', reportPath);
              }
          
              // Define card style based on test results
              const hasFailures = reportStats.failures > 0;
              const style = hasFailures ? "attention" : "good";
              const statusText = hasFailures ? "**Cypress Test Run Failed** ❌" : "**Cypress Test Run Passed** ✅";
          
              // Create Teams message card
              const message = {
                type: "message",
                attachments: [{
                  contentType: "application/vnd.microsoft.card.adaptive",
                  contentUrl: null,
                  content: {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    type: "AdaptiveCard",
                    version: "1.2",
                    body: [{
                      type: "Container",
                      style: style,
                      items: [
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: statusText,
                          size: "large",
                          horizontalAlignment: "center"
                        },
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: "**Branch:** " + process.env.GITHUB_REF
                        },
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: "**Workflow:** " + process.env.GITHUB_WORKFLOW
                        },
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: "**Environment:** " + process.env.ENVIRONMENT
                        },
                        {
                          type: "FactSet",
                          facts: [
                            { title: "Total Tests:", value: reportStats.tests.toString() },
                            { title: "Passed:", value: reportStats.passes.toString() },
                            { title: "Failed:", value: reportStats.failures.toString() }
                          ]
                        },
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: "**See more information:** [" + process.env.INFORMATION_LINK + "](" + process.env.INFORMATION_LINK + ")"
                        }
                      ]
                    }]
                  }
                }]
              };
          
              // Send the notification
              await axios.post(process.env.TEAMS_WEBHOOK_URL, message);
              console.log("Message sent to Teams successfully");
            } catch (error) {
              console.error("Error sending notification to Teams:", error);
              process.exit(1);
            }
          }
          
          sendTeamsNotification();
          EOF
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          ENVIRONMENT: ${{ inputs.environment }}
          INFORMATION_LINK: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
